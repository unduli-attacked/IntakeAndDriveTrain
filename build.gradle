plugins {
  id "java"
  id "edu.wpi.first.GradleRIO" version "2019.4.1"
  id 'checkstyle'
  id "com.diffplug.gradle.spotless" version "3.17.0"
}

def JAVA_HOME = "C:\\Program Files\\Java\\jdk-11.0.2"

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
  targets {
    roboRIO("roborio") {
      // Team number is loaded either from the .wpilib/wpilib_preferences.json
      // or from command line. If not found an exception will be thrown.
      // You can use getTeamOrDefault(team) instead of getTeamNumber if you
      // want to store a team number in this file.
      team = frc.getTeamNumber()
    }
  }
  artifacts {
    frcJavaArtifact('frcJava') {
      targets << "roborio"
      // Debug can be overridden by command line, for use with VSCode
      debug = frc.getDebugOrDefault(false)
    }
    // Built in artifact to deploy arbitrary files to the roboRIO.
    fileTreeArtifact('frcStaticFileDeploy') {
      // The directory below is the local directory to deploy
      files = fileTree(dir: 'src/main/deploy')
      // Deploy to RoboRIO target, into /home/lvuser/deploy
      targets << "roborio"
      directory = '/home/lvuser/deploy'
    }
  }
}

// Set this to true to enable desktop support.
def includeDesktopSupport = true

apply plugin: 'java'
// apply plugin: JavadocPlugin

javadoc {
    options.addBooleanOption('html5', true)
}

// Maven central needed for JUnit
repositories {
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

apply plugin: 'checkstyle'
checkstyle {
    toolVersion '7.8.1'
    configFile file("config/checkstyle/checkstyle.xml")
    showViolations = true
    ignoreFailures = false
    sourceSets = []
}
checkstyleMain {
    source ='src/main/java'
}
checkstyleTest {
    source ='src/test/java'
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
  compile wpi.deps.wpilib()
  compile wpi.deps.vendor.java()
  nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
  nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)
  simulation "edu.wpi.first.halsim:halsim_lowfi:${wpi.wpilibVersion}:${wpi.platforms.desktop}@zip"
  // testCompile 'junit:junit:4.12'
  compile 'com.google.code.gson:gson:2.8.2'

	compile 'com.github.5190GreenHopeRobotics:FalconLibrary:2019.2.17'

  // testCompile group: 'org.openpnp', name: 'opencv', version: '3.2.0-0'

  testCompileOnly(
    'junit:junit:4.12'
  )
  testImplementation(
    'org.junit.jupiter:junit-jupiter-api:5.1.0'
  )
  testRuntimeOnly(
    'org.junit.jupiter:junit-jupiter-engine:5.1.0',
    'org.junit.vintage:junit-vintage-engine:5.1.0'
  )
}

test {
  useJUnitPlatform()
}

spotless {
  java {
    // licenseHeader '/* Licensed under Apache-2.0 */'	// License header
    // Obviously, you can't specify both licenseHeader and licenseHeaderFile at the same time

    // importOrder 'java', 'javax', 'org', 'com', 'com.diffplug', ''	// A sequence of package names
    importOrderFile 'config\\spotless\\importorder'				// An import ordering file, exported from Eclipse
    // As before, you can't specify both importOrder and importOrderFile at the same time
    // You probably want an empty string at the end - all of the imports you didn't specify
    // explicitly will go there.

    removeUnusedImports() // removes any unused imports

    eclipse().configFile 'config\\spotless\\eclipseformat.xml'	// XML file dumped out by the Eclipse formatter
    // If you have Eclipse preference or property files, you can use them too.
    // eclipse('4.7.1') to specify a specific version of eclipse,
    // available versions are: https://github.com/diffplug/spotless/tree/master/lib-extra/src/main/resources/com/diffplug/spotless/extra/config/eclipse_jdt_formatter
  }
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
  manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}
